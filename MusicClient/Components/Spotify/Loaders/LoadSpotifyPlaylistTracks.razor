@using MusicClient.Data.SQLServer.Models.Spotify
@using MusicClient.Data.SQLServer.MusicClientDbOperations.Spotify
@using static MusicClient.Data.Globals
@using Globals = MusicClient.Globals
@using SpotifyApi.NetCore
@inject IPlaylistsApi playlistsApi

<button class="btn btn-primary" @onclick=LoadSpotifyPlaylistTracksAsync>Load Spotify Playlist Tracks</button>
<hr />
<table class="table">
    @if (PreloadedSpotifyPlaylistTracks?.Count > 0)
    {
        foreach (SpotifyPlaylistTrack spotifyPlaylistTrack in PreloadedSpotifyPlaylistTracks)
        {
            <tr>
                <td>@spotifyPlaylistTrack.ID</td>
                <td>@spotifyPlaylistTrack.PlaylistID</td>
                <td>@spotifyPlaylistTrack.TrackID</td>
            </tr>
        }
    }
</table>
<hr />

@code {
    async Task LoadSpotifyPlaylistTracksAsync()
    {
        foreach (SpotifyPlaylist spotifyPlaylist in PreloadedSpotifyPlaylists)
        {
            bool isMore = true;
            int currentTrackCount = 0;
            do
            {
                PlaylistPaged playlistPaged = await playlistsApi.GetTracks(spotifyPlaylist.PlaylistID, Globals.SpotifyAccessToken?.AccessToken, limit: 100, offset: currentTrackCount);
                foreach (PlaylistTrack playlistTrack in playlistPaged.Items.ToList())
                {
                    SpotifyPlaylistTracks spotifyPlaylistTracks = new();
                    SpotifyPlaylistTrack spotifyPlaylistTrack = SpotifyPlaylistTrack.NewSpotifyPlaylistTrack(spotifyPlaylist.ID, 
                        PreloadedSpotifyTracks.First(t => t.TrackID == playlistTrack.Track.Id).ID);
                    try
                    {
                        spotifyPlaylistTracks.AddSpotifyPlaylistTrack(spotifyPlaylistTrack);
                        StateHasChanged();
                    }
                    catch { }
                }
                if (playlistPaged.Items.Length < 100)
                {
                    isMore = false;
                }
                currentTrackCount += 100;
            } while (isMore);
        }

        await base.OnInitializedAsync();
    }
}
