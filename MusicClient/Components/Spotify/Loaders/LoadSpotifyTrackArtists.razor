@using MusicClient.Data.SQLServer.Models.Spotify
@using MusicClient.Data.SQLServer.MusicClientDbOperations.Spotify
@using SpotifyApi.NetCore
@inject IPlaylistsApi playlistsApi

<button class="btn btn-primary" @onclick=LoadSpotifyTrackArtistsAsync>Load Spotify Track Artists</button>
<hr />
<table class="table">
    @if (MusicClient.Data.Globals.PreloadedSpotifyTrackArtists.Count > 0)
    {
        foreach (SpotifyTrackArtist spotifyTrackArtist in MusicClient.Data.Globals.PreloadedSpotifyTrackArtists)
        {
            <tr>
                <td>@spotifyTrackArtist.ID</td>
                <td>@spotifyTrackArtist.ArtistID</td>
                <td>@spotifyTrackArtist.TrackID</td>
            </tr>
        }
    }
</table>
<hr />

@code {
    async Task LoadSpotifyTrackArtistsAsync()
    {
        foreach (SpotifyPlaylist spotifyPlaylist in MusicClient.Data.Globals.PreloadedSpotifyPlaylists)
        {
            bool isMore = true;
            int currentTrackCount = 0;
            do
            {
                PlaylistPaged playlistPaged = await playlistsApi.GetTracks(spotifyPlaylist.PlaylistID, Globals.SpotifyAccessToken?.AccessToken, limit: 100, offset: currentTrackCount);
                foreach (PlaylistTrack playlistTrack in playlistPaged.Items.ToList())
                {
                    foreach (Artist artist in playlistTrack.Track.Artists)
                    {
                        SpotifyTrackArtists spotifyTrackArtists = new();
                        SpotifyTrackArtist spotifyTrackArtist = SpotifyTrackArtist.NewSpotifyTrackArtist(
                            MusicClient.Data.Globals.PreloadedSpotifyTracks.First(t => t.TrackID == playlistTrack.Track.Id).ID,
                            MusicClient.Data.Globals.PreloadedSpotifyArtists.First(a => a.ArtistID == artist.Id).ID);
                        try
                        {
                            spotifyTrackArtists.AddSpotifyTrackArtist(spotifyTrackArtist);
                        }
                        catch { }
                    }
                }
                if (playlistPaged.Items.Length < 100)
                {
                    isMore = false;
                }
                currentTrackCount += 100;
            } while (isMore);
        }

        await base.OnInitializedAsync();
    }
}
