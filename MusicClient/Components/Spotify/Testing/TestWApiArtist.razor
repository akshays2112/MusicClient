@using WebApis.Net7.Spotify.Models
@using WebApis.Net7.Spotify.Models.Responses
@using WebApis.Net7.Spotify.WebApiEndpoints
@using WebApis.Net7.Spotify
@inject IWApiArtist wApiArtist

<h3>TestingWebApisNet6</h3>

@if(artist is not null)
{
    <div>
        <div class="MCDivTestHeader">
            <span>GetArtist</span>
        </div>
        <div class="MCDivTestResults">
            <span>@artist.Name</span><br />
        </div>
    </div>
}
<br />
@if(severalArtists?.Artists?.Length > 0)
{
    <div>
        <div class="MCDivTestHeader">
            <span>GetSeveralArtists</span>
        </div>
        <div class="MCDivTestResults">
        @foreach(Artist a in severalArtists.Artists)
        {
            <span>@a.Name</span><br />
        }
        </div>
    </div>
}
<br />

@if(artistsAlbumsList?.Count > 0)
{
    <div>
        <div class="MCDivTestHeader">
            <span>GetArtistsAlbums</span>
        </div>
        <div class="MCDivTestResults">
        @foreach(Album album in artistsAlbumsList)
        {
            <span>@album.Name</span><br />
        }
        </div>
    </div>
}
<br />

@if(artistsTopTracks?.Tracks?.Length > 0)
{
    <div>
        <div class="MCDivTestHeader">
            <span>GetArtistsTopTracks</span>
        </div>
        <div class="MCDivTestResults">
        @foreach(Track track in artistsTopTracks.Tracks)
        {
            if (!string.IsNullOrWhiteSpace(track.Name))
            {
                <span>@track.Name</span><br />
            }
        }
        </div>
    </div>
}
<br />

@if(artistsRelatedArtists?.Artists?.Length > 0)
{
    <div>
        <div class="MCDivTestHeader">
            <span>GetArtistsRelatedArtists</span>
        </div>
        <div class="MCDivTestResults">
        @foreach(Artist artist in artistsRelatedArtists.Artists)
        {
            if (!string.IsNullOrWhiteSpace(artist.Name))
            {
                <span>@artist.Name</span><br />
            }
        }
        </div>
    </div>
}
<br />

@code {
    Artist? artist;
    RArtists? severalArtists;
    List<Album> artistsAlbumsList = new();
    RTracks? artistsTopTracks;
    RArtists? artistsRelatedArtists;

    protected override async Task OnInitializedAsync()
    {
        artist = await wApiArtist.GetArtist("0TnOYISbd1XYRBk9myaseg");

        StateHasChanged();

        severalArtists = await wApiArtist.GetSeveralArtists(new string[]
        {
            "2CIMQHirSU0MQqyYHq0eOx", "57dN52uHvrHOxijzpIgu3E", "1vCWHaC5f2uS3yhpwWbIA6"
        });

        StateHasChanged();

        Paged<Album>? artistsAlbums = await wApiArtist.GetArtistsAlbums("0TnOYISbd1XYRBk9myaseg",
            include_groups: new WApiSpotifyGlobals.IncludeGroups[] { WApiSpotifyGlobals.IncludeGroups.single }, limit: 50);
        if (artistsAlbums?.Items?.Length > 0)
        {
            artistsAlbumsList.AddRange(artistsAlbums.Items);
        }
        while (!string.IsNullOrWhiteSpace(artistsAlbums?.Next))
        {
            artistsAlbums = await wApiArtist.GetNextPageArtistsAlbums(artistsAlbums.Next);
            if (artistsAlbums?.Items?.Length > 0)
            {
                artistsAlbumsList.AddRange(artistsAlbums.Items);
            }
        }

        StateHasChanged();

        artistsTopTracks = await wApiArtist.GetArtistsTopTracks("0TnOYISbd1XYRBk9myaseg", "ES");

        StateHasChanged();

        artistsRelatedArtists = await wApiArtist.GetArtistsRelatedArtists("0TnOYISbd1XYRBk9myaseg");

        StateHasChanged();

        await base.OnInitializedAsync();
    }
}
