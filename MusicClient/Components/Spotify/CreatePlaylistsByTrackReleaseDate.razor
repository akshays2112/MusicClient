@using System.Linq
@using MusicClient.Data.SQLServer.Models.Spotify
@using MusicClient.Data.SQLServer.MusicClientDbOperations.Spotify
@using SpotifyApi.NetCore
@using static MusicClient.Data.Globals
@using Globals = MusicClient.Globals
@inject IUsersProfileApi usersProfileApi
@inject IPlaylistsApi playlistsApi

<h3>Query1</h3>

@code {
	struct Query1Struct1
	{
		public int ID { get; set; }
		public string TrackID { get; set; }
		public string TrackName { get; set; }
		public int TrackPopularity { get; set; }
		public DateTime AlbumReleaseDate { get; set; }
		public int ReleaseDecade { get; set; }
	}

	protected override async Task OnInitializedAsync()
	{
		Query1Struct1[]? query1Result1 = (
			from preloadedSpotifyTrackAlbum in PreloadedSpotifyTrackAlbums
			join preloadedSpotifyTrack in PreloadedSpotifyTracks
			on preloadedSpotifyTrackAlbum.TrackID equals preloadedSpotifyTrack.ID
			join preloadedSpotifyAlbum in PreloadedSpotifyAlbums
			on preloadedSpotifyTrackAlbum.AlbumID equals preloadedSpotifyAlbum.ID
			select new Query1Struct1
				{
					ID = preloadedSpotifyTrack.ID,
					TrackID = preloadedSpotifyTrack.TrackID,
					TrackName = preloadedSpotifyTrack.Name,
					TrackPopularity = preloadedSpotifyTrack.Popularity,
					AlbumReleaseDate = preloadedSpotifyAlbum.ReleaseDate,
					ReleaseDecade = preloadedSpotifyAlbum.ReleaseDate.Year - (preloadedSpotifyAlbum.ReleaseDate.Year % 10),
				}).OrderBy(q1c1 => q1c1.ReleaseDecade).ToArray<Query1Struct1>();

		SpotifyPlaylists spotifyPlaylists = new();
		User user = await usersProfileApi.GetCurrentUsersProfile(Globals.SpotifyAccessToken?.AccessToken);
		int currentDecade = 0;
		Playlist? playlist = null;
		Stack<string> trackUris = new();
		for (int i = 0; i < query1Result1.Length; i++) // Result result1 in results)
		{
			if (query1Result1[i].ReleaseDecade != currentDecade)
			{
				currentDecade = query1Result1[i].ReleaseDecade;
				playlist = await playlistsApi.CreatePlaylist(
					user.Id, new PlaylistDetails { Name = $"Great Music {query1Result1[i].ReleaseDecade}'s", Description = "New playlist" },
					Globals.SpotifyAccessToken?.AccessToken);
				try
				{
					SpotifyPlaylist spotifyPlaylist = SpotifyPlaylist.NewSpotifyPlaylist(playlist.Id, playlist.Name);
					spotifyPlaylists.AddSpotifyPlaylist(spotifyPlaylist);
				}
				catch
				{
				}
			}
			else
			{
				trackUris.Push($"spotify:track:{query1Result1[i].TrackID}");
			}
			if (playlist != null && (trackUris.Count >= 100 || (i + 1 < query1Result1.Length && query1Result1[i + 1].ReleaseDecade != currentDecade)))
			{
				_ = playlistsApi.AddItemsToPlaylist(playlist.Id, trackUris.ToArray<string>(), 0, Globals.SpotifyAccessToken?.AccessToken);
				trackUris.Clear();
			}
		}
		if (playlist != null && trackUris.Count > 0)
		{
			_ = playlistsApi.AddItemsToPlaylist(playlist?.Id, trackUris.ToArray<string>(), 0, Globals.SpotifyAccessToken?.AccessToken);
			trackUris.Clear();
		}

		await base.OnInitializedAsync();
	}
}
