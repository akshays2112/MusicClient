@using System.Text.Json
@using System.Net.Http.Headers
@using System.Text
@using System.Text.RegularExpressions
@using System.Net
@inject NavigationManager myNavMgr

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">MusicClient</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <ul class="nav flex-column">
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> Home
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" @onclick=GetSpotifyToken>
                    <span class="oi oi-plus" aria-hidden="true"></span> Spotify Login
                </NavLink>
            </li>
            @if(!string.IsNullOrWhiteSpace(MusicClient.Globals.SpotifyAccessToken?.AccessToken))
            {
            <li class="nav-item px-3">
                <NavLink class="nav-link" @onclick="()=>expandSqlServer = !expandSqlServer" href="#">
                    <span class="oi oi-book" aria-hidden="true"></span>SQL Server
                </NavLink>
                @if (expandSqlServer)
                {
                        <NavLink class="nav-link" href="/spotify/loaders/loadplaylists">
                            <span class="oi oi-plus" aria-hidden="true"></span> Load Playlists
                        </NavLink>
                        <NavLink class="nav-link" href="/spotify/loaders/loadtracks">
                            <span class="oi oi-plus" aria-hidden="true"></span> Load Tracks
                        </NavLink>
                        <NavLink class="nav-link" href="/spotify/loaders/loadartists">
                            <span class="oi oi-plus" aria-hidden="true"></span> Load Artists
                        </NavLink>
                        <NavLink class="nav-link" href="/spotify/loaders/loadalbums">
                            <span class="oi oi-plus" aria-hidden="true"></span> Load Albums
                        </NavLink>
                        <NavLink class="nav-link" href="/spotify/loaders/loadplaylisttracks">
                            <span class="oi oi-plus" aria-hidden="true"></span> Load Playlist Tracks
                        </NavLink>
                        <NavLink class="nav-link" href="/spotify/loaders/loadtrackalbums">
                            <span class="oi oi-plus" aria-hidden="true"></span> Load Track Albums
                        </NavLink>
                        <NavLink class="nav-link" href="/spotify/loaders/loadtrackartists">
                            <span class="oi oi-plus" aria-hidden="true"></span> Load Track Artists
                        </NavLink>
                }
            </li>
            }
            @if(!string.IsNullOrWhiteSpace(MusicClient.Globals.SpotifyAccessToken?.AccessToken))
            {
            <li class="nav-item px-3">
                <NavLink class="nav-link" @onclick="()=>expandSqlServerQueries = !expandSqlServerQueries" href="#">
                    <span class="oi oi-book" aria-hidden="true"></span>SQLSrv Queries
                </NavLink>
                @if (expandSqlServerQueries)
                {
                    <NavLink class="nav-link" href="/spotify/queries/query1">
                        <span class="oi oi-plus" aria-hidden="true"></span> Query1
                    </NavLink>
                }
            </li>
            }
            @if(!string.IsNullOrWhiteSpace(MusicClient.Globals.SpotifyAccessToken?.AccessToken))
            {
            <li class="nav-item px-3">
                <NavLink class="nav-link" @onclick="()=>expandSpotifyPages = !expandSpotifyPages" href="#">
                    <span class="oi oi-book" aria-hidden="true"></span>Spotify Pages
                </NavLink>
                @if (expandSpotifyPages)
                {
                    <NavLink class="nav-link" href="/spotify/createplaylistsbytrackreleasedate">
                        <span class="oi oi-plus" aria-hidden="true"></span> Create RelDatePlylsts
                    </NavLink>
                    <NavLink class="nav-link" href="/spotify/testingwebapisnet6">
                        <span class="oi oi-plus" aria-hidden="true"></span> Testing WebApis.Net6
                    </NavLink>
                }
            </li>
            }
        </ul>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private bool expandSqlServer;
    private bool expandSqlServerQueries;
    private bool expandSpotifyPages;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    HttpClient httpClient = new HttpClient { BaseAddress = new Uri(Globals.RedirectUri) };

    void GetSpotifyToken()
    {
        if (string.IsNullOrWhiteSpace(Globals.SpotifyAccessToken?.AccessToken))
        {
            string scopes = WebUtility.UrlEncode($@"user-read-playback-position user-read-email user-library-read user-top-read playlist-modify-public{
                ' '}user-follow-read user-read-playback-state user-modify-playback-state user-read-private playlist-read-private user-library-modify{
                ' '}playlist-read-collaborative playlist-modify-private user-follow-modify user-read-currently-playing user-read-recently-played");
            string redirectUri = WebUtility.UrlEncode(httpClient.BaseAddress?.ToString() ?? "");

            myNavMgr.NavigateTo($@"https://accounts.spotify.com/authorize?response_type=code&client_id={
                Globals.SpotifyClientId}&scope={scopes}&redirect_uri={redirectUri}", true);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        string queryString = myNavMgr.ToAbsoluteUri(myNavMgr.Uri).Query;
        if (!string.IsNullOrWhiteSpace(queryString) && queryString.StartsWith("?code=") && queryString.Length > 6 &&
                    string.IsNullOrWhiteSpace(Globals.SpotifyAccessToken?.AccessToken))
        {
            string credentials = String.Format("{0}:{1}", Globals.SpotifyClientId, Globals.SpotifyClientSecret);

            httpClient.DefaultRequestHeaders.Accept.Clear();
            httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", 
                Convert.ToBase64String(Encoding.UTF8.GetBytes(credentials)));

            //Prepare Request Body
            List<KeyValuePair<string, string>> requestData = new List<KeyValuePair<string, string>>();
            requestData.Add(new KeyValuePair<string, string>("grant_type", "authorization_code"));
            requestData.Add(new KeyValuePair<string, string>("code", queryString.Substring(6)));
            requestData.Add(new KeyValuePair<string, string>("redirect_uri", httpClient.BaseAddress?.ToString() ?? ""));

            FormUrlEncodedContent requestBody = new FormUrlEncodedContent(requestData);

            //Request Token
            var request = await httpClient.PostAsync("https://accounts.spotify.com/api/token", requestBody);
            var response = await request.Content.ReadAsStringAsync();
            Globals.SpotifyAccessToken = JsonSerializer.Deserialize<SpotifyAccessToken>(response);
        }

        await base.OnInitializedAsync();
    }
}
